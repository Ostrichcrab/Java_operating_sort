/**
一、Comparator
强行对某个对象collection进行整体排序的比较函数，可以将Comparator传递给Collections.sort或Arrays.sort。

接口方法：这里也给出了两种方法，
*/
import java.util.*;
class structSort
{
	String x;
	int y;
}
class cmp implements Comparator<structSort>
{
	public int compare(structSort o1, structSort o2)
	{
		if(o1.x.compareTo(o2.x)==0) //这个相当于c/c++中strcmp（o1.x , o2,x）
		{
			return o1.y - o2.y;
		}
		return o1.x.compareTo(o2.x);
	}
}
public class Main {
	public static void main(String[] args)
	{
		Comparator<structSort> comparator = new Comparator<structSort>() {
			public int compare(structSort o1, structSort o2) {
				if (o1.x.compareTo(o2.x) == 0) {
					return o1.y - o2.y;
				}
				return o1.x.compareTo(o2.x);
			}
		};
			Scanner cin = new Scanner(System.in);
			int n = cin.nextInt();
			structSort a[] = new structSort[10];
			for(int i = 0; i < n; i++) {
				a[i] = new structSort();
				a[i].x = cin.next();
				a[i].y = cin.nextInt();
			}
			Arrays.sort(a,0,n,comparator); //这个直接使用Comparator
			Arrays.sort(a,0,n,new cmp()); //这个实现Comparator，就就跟c++中的sort函数调用就差不多了
			for(int i = 0; i< n ;i++)
			{
				System.out.println(a[i].x+" "+a[i].y);
			}
	}
}
/**
  10
 a 10 
 a 2 
 c 3 
 d 4 
 e 5 
 f 6 
 g 7 
 h 8 
 i 9 
 j 10
 */
